#!/bin/bash
: '
prometheus-mining - Prometheus exporter for some mining software
Copyright (C) 2020-2021 platofff

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
'

trm() {
	resp=`echo -n 'summary+devdetails+gpucount' | nc -w 10 $1 $2 | sed 's/,/\n/g; s/|//g' | grep '^Count\|^Elapsed'`
	[ -z "$resp" ] && return -1
	export $resp
	for (( i=0; i<$Count; i++ ))
	do
        	export `echo -n 'gpu|'$i | nc $1 $2 | sed 's/ //g; s/,/\n/g' | grep '^Accepted\|^Rejected\|Temperature\|FanPercent\|MHS30s\|HardwareErrors'`
		l="{gpu=\"$i\" host=\"$1:$2\"}"
        	echo "accepted$l $Accepted
rejected$l $Rejected
temperature$l $Temperature
fan$l $FanPercent
hashrate$l $MHS30s
hw$l $HardwareErrors"
	done
	echo "uptime{host=\"$1:$2\"} $Elapsed"
}

t-rex() {
        resp=`curl -s http://$1:$2/summary --max-time 10 || return -1`
        stats=( `jq -r '.gpus[] | [.gpu_id, .fan_speed, .temperature, .hashrate_minute, .shares.accepted_count, .shares.invalid_count, .shares.rejected_count] | @tsv' <<< $resp` )
        uptime=`jq '.uptime' <<< $resp`

        [ -z "$uptime" ] && return -1
        echo "uptime{host=\"$1:$2\"} $uptime"
        while [ "$stats" != "" ]
        do
                gpu=( "${stats[@]:0:7}" )
                [ "${#gpu[@]}" != "7" ] && break
                l="{gpu=\"${gpu[0]}\" host=\"$1:$2\"}"
                echo "accepted$l ${gpu[4]}
hw$l ${gpu[5]}
rejected$l ${gpu[6]}
temperature$l ${gpu[2]}
fan$l ${gpu[1]}
hashrate$l $(sed 's/..$/.&/' <<< $(( ${gpu[3]} / 10000 )))"
                stats=( "${stats[@]:7}" )
        done
}

lolminer() {
	resp=`curl -s http://$1:$2/summary --max-time 10 || return -1`
	stats=( `jq -r '.GPUs[] | [.Index, ."Fan Speed (%)", ."Temp (deg C)", .Performance, .Session_Accepted, .Session_HWErr] | @tsv' <<< $resp` )
	uptime=`jq '.Session | .Uptime' <<< $resp`
	[ -z "$stats" ] && return -1
	echo "uptime{host=\"$1:$2\"} $uptime"

	while [ "$stats" != "" ]
	do
		gpu=( "${stats[@]:0:6}" )
		l="{gpu=\"${gpu[0]}\" host=\"$1:$2\"}"
		echo "accepted$l ${gpu[4]}
temperature$l ${gpu[2]}
fan$l ${gpu[1]}
hashrate$l ${gpu[3]}
hw$l ${gpu[5]}
rejected$l 0"
		stats=( "${stats[@]:6}" )
	done
}

ethman() {
	readarray -t stats < <(echo '{"method": "miner_getstat1", "jsonrpc": "2.0", "id": 0 }' | nc -w 10 $1 $2 | jq -c '.result[]' | sed 's/\"//g; s/\;/ /g')
	hashrate=( ${stats[3]} )
	shares=( ${stats[2]} )
	tempfan=( ${stats[6]} )
	[ -z "${shares[1]}" ] && return -1

	echo "uptime{host=\"$1:$2\"} $(( stats[1] * 60 ))
accepted{host=\"$1:$2\"} ${shares[1]}
rejected{host=\"$1:$2\"} ${shares[2]}"
	for (( i = 0; i < ${#hashrate[@]}; i++ ))
	do
		l="{gpu=\"$i\" host=\"$1:$2\"}"
		temp=$(( i / 2 ))
		fan=$(( temp + 1 ))
		echo "temperature$l ${tempfan[$temp]}
fan$l ${tempfan[$fan]}
hashrate$l $(sed 's/....$//; s/..$/.&/' <<< ${hashrate[$i]})"
	done
}

nvminer() {
	resp=$(curl -s http://$1:$2 --max-time 10 || return -1)
	uptime=`jq '.uptime' <<< $resp | sed 's/\"//g; s/.$//'`
	[ -z "$uptime" ] && return -1
	[ "$uptime" == "0" ] && uptime=1

	echo "uptime{host=\"$1:$2\"} $(( uptime * 3600 ))"
	readarray -t stats < <(jq -r '.devices[] | [.hashrate, .fan, .temperature] | @tsv' <<< $resp)
	for (( i = 0; i < ${#stats[@]}; i++ ))
	do
                gpu=( ${stats[$i]} )
                [ "${#gpu[@]}" != "3" ] && continue
		l="{gpu=\"$i\" host=\"$1:$2\"}"
		echo "temperature$l ${gpu[2]}
fan$l ${gpu[1]}
hashrate$l ${gpu[0]}
accepted$l 0
rejected $l 0"
	done
}

source ../config
RIGS=( `sed 's/=.*//g' ../config` )

echo 'Content-type: text/plain; version=0.0.4'
echo ''
echo '# TYPE accepted counter
# TYPE rejected counter
# TYPE temperature gauge
# TYPE fan gauge
# TYPE hashrate summary
# TYPE hw counter
# TYPE uptime gauge'

for rig in "${RIGS[@]}"
do
        command=$rig[@]
        ${!command} ||
        (
                rig=( ${!command} )
                l="{gpu=\"0\" host=\"${rig[1]}:${rig[2]}\"}"
                echo "uptime{host=\"${rig[1]}:${rig[2]}\"} 0
accepted$l 0
temperature$l 0
fan$l 0
hashrate$l 0
hw$l 0
rejected$l 0"
        )
done
